[
  {
    "id": "00002e0d-170a-4be6-971f-8129bca8b435",
    "repository_id": "c90131b4-5c7c-4ebc-a1f3-8002d219bfe0",
    "path": "blast-optimism/cannon/mipsevm/open_mips_tests/test/andi.asm",
    "content": "###############################################################################\n# File         : andi.asm\n# Project      : MIPS32 MUX\n# Author:      : Grant Ayers (ayers@cs.stanford.edu)\n#\n# Standards/Formatting:\n#   MIPS gas, soft tab, 80 column\n#\n# Description:\n#   Test the functionality of the 'andi' instruction.\n#\n###############################################################################\n\n    .section .test, 'x'\n    .balign 4\n    .set    noreorder\n    .global test\n    .ent    test\ntest:\n    lui     $s0, 0xbfff         # Load the base address 0xbffffff0\n    ori     $s0, 0xfff0\n    ori     $s1, $0, 1          # Prepare the 'done' status\n\n    #### Test code start ####\n\n    ori     $t0, $0,  0xcafe    # A = 0xcafe\n    andi    $t1, $t0, 0xaaaa    # B = A & 0xaaaa = 0x8aaa\n    andi    $t2, $t1, 0x5555    # C = B & 0x5555 = 0\n    sltiu   $v0, $t2, 1\n\n    #### Test code end ####\n\n    sw      $v0, 8($s0)         # Set the test result\n    sw      $s1, 4($s0)         # Set 'done'\n\n$done:\n    jr      $ra\n    nop\n\n    .end test",
    "language": "Assembly",
    "symbolic_link": false,
    "in_scope": true,
    "mode": 436,
    "last_modified": "2024-01-30 14:37:11+00"
  },
  {
    "id": "000b3742-f5b6-427c-998c-42e41ba4c16b",
    "repository_id": "c90131b4-5c7c-4ebc-a1f3-8002d219bfe0",
    "path": "blast-geth/build/ci-notes.md",
    "content": "# Debian Packaging\n\nTagged releases and develop branch commits are available as installable Debian packages\nfor Ubuntu. Packages are built for the all Ubuntu versions which are supported by\nCanonical.\n\nPackages of develop branch commits have suffix -unstable and cannot be installed alongside\nthe stable version. Switching between release streams requires user intervention.\n\n## Launchpad\n\nThe packages are built and served by launchpad.net. We generate a Debian source package\nfor each distribution and upload it. Their builder picks up the source package, builds it\nand installs the new version into the PPA repository. Launchpad requires a valid signature\nby a team member for source package uploads.\n\nThe signing key is stored in an environment variable which Travis CI makes available to\ncertain builds. Since Travis CI doesn't support FTP, SFTP is used to transfer the\npackages. To set this up yourself, you need to create a Launchpad user and add a GPG key\nand SSH key to it. Then encode both keys as base64 and configure 'secret' environment\nvariables `PPA_SIGNING_KEY` and `PPA_SSH_KEY` on Travis.\n\nWe want to build go-ethereum with the most recent version of Go, irrespective of the Go\nversion that is available in the main Ubuntu repository. In order to make this possible,\nwe bundle the entire Go sources into our own source archive and start the built job by\ncompiling Go and then using that to build go-ethereum. On Trusty we have a special case\nrequiring the `~gophers/ubuntu/archive` PPA since Trusty can't even build Go itself. PPA\ndeps are set at https://launchpad.net/%7Eethereum/+archive/ubuntu/ethereum/+edit-dependencies\n\n## Building Packages Locally (for testing)\n\nYou need to run Ubuntu to do test packaging.\n\nInstall any version of Go and Debian packaging tools:\n\n    $ sudo apt-get install build-essential golang-go devscripts debhelper python-bzrlib python-paramiko\n\nCreate the source packages:\n\n    $ go run build/ci.go debsrc -workdir dist\n\nThen go into the source package directory for your running distribution and build the package:\n\n    $ cd dist/ethereum-unstable-1.9.6+bionic\n    $ dpkg-buildpackage\n\nBuilt packages are placed in the dist/ directory.\n\n    $ cd ..\n    $ dpkg-deb -c geth-unstable_1.9.6+bionic_amd64.deb",
    "language": "Markdown",
    "symbolic_link": false,
    "in_scope": true,
    "mode": 436,
    "last_modified": "2024-01-30 14:37:11+00"
  },
  {
    "id": "000b48bf-30fb-4939-94ab-5227ee93a817",
    "repository_id": "c90131b4-5c7c-4ebc-a1f3-8002d219bfe0",
    "path": "blast-optimism/packages/contracts-bedrock/src/libraries/trie/MerkleTrie.sol",
    "content": "# Debian Packaging\n\nTagged releases and develop branch commits are available as installable Debian packages\nfor Ubuntu. Packages are built for the all Ubuntu versions which are supported by\nCanonical.\n\nPackages of develop branch commits have suffix -unstable and cannot be installed alongside\nthe stable version. Switching between release streams requires user intervention.\n\n## Launchpad\n\nThe packages are built and served by launchpad.net. We generate a Debian source package\nfor each distribution and upload it. Their builder picks up the source package, builds it\nand installs the new version into the PPA repository. Launchpad requires a valid signature\nby a team member for source package uploads.\n\nThe signing key is stored in an environment variable which Travis CI makes available to\ncertain builds. Since Travis CI doesn't support FTP, SFTP is used to transfer the\npackages. To set this up yourself, you need to create a Launchpad user and add a GPG key\nand SSH key to it. Then encode both keys as base64 and configure 'secret' environment\nvariables `PPA_SIGNING_KEY` and `PPA_SSH_KEY` on Travis.\n\nWe want to build go-ethereum with the most recent version of Go, irrespective of the Go\nversion that is available in the main Ubuntu repository. In order to make this possible,\nwe bundle the entire Go sources into our own source archive and start the built job by\ncompiling Go and then using that to build go-ethereum. On Trusty we have a special case\nrequiring the `~gophers/ubuntu/archive` PPA since Trusty can't even build Go itself. PPA\ndeps are set at https://launchpad.net/%7Eethereum/+archive/ubuntu/ethereum/+edit-dependencies\n\n## Building Packages Locally (for testing)\n\nYou need to run Ubuntu to do test packaging.\n\nInstall any version of Go and Debian packaging tools:\n\n    $ sudo apt-get install build-essential golang-go devscripts debhelper python-bzrlib python-paramiko\n\nCreate the source packages:\n\n    $ go run build/ci.go debsrc -workdir dist\n\nThen go into the source package directory for your running distribution and build the package:\n\n    $ cd dist/ethereum-unstable-1.9.6+bionic\n    $ dpkg-buildpackage\n\nBuilt packages are placed in the dist/ directory.\n\n    $ cd ..\n    $ dpkg-deb -c geth-unstable_1.9.6+bionic_amd64.deb",
    "language": "Solidity",
    "symbolic_link": false,
    "in_scope": true,
    "mode": 436,
    "last_modified": "2024-01-30 14:37:11+00"
  },
  {
    "id": "000c66a2-97da-4f4a-8084-efe57c0324b0",
    "repository_id": "c90131b4-5c7c-4ebc-a1f3-8002d219bfe0",
    "path": "blast-optimism/packages/contracts-bedrock/periphery-deploy-config/optimism-goerli.json",
    "content": "# Debian Packaging\n\nTagged releases and develop branch commits are available as installable Debian packages\nfor Ubuntu. Packages are built for the all Ubuntu versions which are supported by\nCanonical.\n\nPackages of develop branch commits have suffix -unstable and cannot be installed alongside\nthe stable version. Switching between release streams requires user intervention.\n\n## Launchpad\n\nThe packages are built and served by launchpad.net. We generate a Debian source package\nfor each distribution and upload it. Their builder picks up the source package, builds it\nand installs the new version into the PPA repository. Launchpad requires a valid signature\nby a team member for source package uploads.\n\nThe signing key is stored in an environment variable which Travis CI makes available to\ncertain builds. Since Travis CI doesn't support FTP, SFTP is used to transfer the\npackages. To set this up yourself, you need to create a Launchpad user and add a GPG key\nand SSH key to it. Then encode both keys as base64 and configure 'secret' environment\nvariables `PPA_SIGNING_KEY` and `PPA_SSH_KEY` on Travis.\n\nWe want to build go-ethereum with the most recent version of Go, irrespective of the Go\nversion that is available in the main Ubuntu repository. In order to make this possible,\nwe bundle the entire Go sources into our own source archive and start the built job by\ncompiling Go and then using that to build go-ethereum. On Trusty we have a special case\nrequiring the `~gophers/ubuntu/archive` PPA since Trusty can't even build Go itself. PPA\ndeps are set at https://launchpad.net/%7Eethereum/+archive/ubuntu/ethereum/+edit-dependencies\n\n## Building Packages Locally (for testing)\n\nYou need to run Ubuntu to do test packaging.\n\nInstall any version of Go and Debian packaging tools:\n\n    $ sudo apt-get install build-essential golang-go devscripts debhelper python-bzrlib python-paramiko\n\nCreate the source packages:\n\n    $ go run build/ci.go debsrc -workdir dist\n\nThen go into the source package directory for your running distribution and build the package:\n\n    $ cd dist/ethereum-unstable-1.9.6+bionic\n    $ dpkg-buildpackage\n\nBuilt packages are placed in the dist/ directory.\n\n    $ cd ..\n    $ dpkg-deb -c geth-unstable_1.9.6+bionic_amd64.deb",
    "language": "JSON",
    "symbolic_link": false,
    "in_scope": true,
    "mode": 436,
    "last_modified": "2024-01-30 14:37:11+00"
  }
]
